// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  boards        BoardMember[]  
  ownedBoards   Board[]
  comments      Comment[]
  cardMembers   CardMember[]
  activities    CardActivity[] 
}

model Board {
  id          Int           @id @default(autoincrement())
  name        String
  description String?       
  isPublic    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     Int          
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     BoardMember[] 
  lists       List[]
}

enum Role {
  OWNER
  MEMBER
  ADMIN
  
}


model BoardMember {
  id        Int      @id @default(autoincrement())
  boardId   Int
  userId    Int
  role      Role     @default(MEMBER) 
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([boardId, userId]) 
}


model List {
  id        Int      @id @default(autoincrement())
  name      String
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          Int           @id @default(autoincrement())
  name        String
  description String?            
  dueDate     DateTime?    
  listId      Int
  list        List         @relation(fields: [listId], references: [id], onDelete: Cascade)   
  members     CardMember[] 
  comments    Comment[]
  checklists  Checklist[]
  activities  CardActivity[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}

model CardMember {
  id        Int      @id @default(autoincrement())
  cardId    Int
  userId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([cardId, userId]) 
}

model Checklist {
  id        Int           @id @default(autoincrement())
  name      String
  cardId    Int
  card      Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  items     ChecklistItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ChecklistItem {
  id          Int       @id @default(autoincrement())
  name        String
  isChecked   Boolean   @default(false)
  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  cardId    Int
  userId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CardActivity {
  id        Int      @id @default(autoincrement())
  activity  String   @db.Text
  cardId    Int
  userId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}